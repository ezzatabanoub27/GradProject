// <auto-generated />
using System;
using FinalAppG.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalAppG.Migrations
{
    [DbContext(typeof(TourismContext))]
    [Migration("20240702103734_ModifyHotelTripRelation")]
    partial class ModifyHotelTripRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingHotel", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("Hotel_Id")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "Hotel_Id");

                    b.HasIndex("Hotel_Id");

                    b.ToTable("BookingHotel");
                });

            modelBuilder.Entity("BookingSpecialTrip", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialTripsSpecialTrip_Id")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "SpecialTripsSpecialTrip_Id");

                    b.HasIndex("SpecialTripsSpecialTrip_Id");

                    b.ToTable("BookingSpecialTrip");
                });

            modelBuilder.Entity("BookingTrip", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("Trip_Id")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "Trip_Id");

                    b.HasIndex("Trip_Id");

                    b.ToTable("BookingTrip");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Government")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("jobId")
                        .HasColumnType("int");

                    b.Property<int?>("specialtripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("jobId");

                    b.HasIndex("specialtripId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Car", b =>
                {
                    b.Property<int>("Car_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Car_Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Car_Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.CarDriverTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("carId")
                        .HasColumnType("int");

                    b.Property<int>("driverId")
                        .HasColumnType("int");

                    b.Property<int>("tripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("carId");

                    b.HasIndex("driverId");

                    b.HasIndex("tripId");

                    b.ToTable("CarDriverTrips");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Driver", b =>
                {
                    b.Property<int>("Driver_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Driver_Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAppointmentIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Driver_Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.FeedBack", b =>
                {
                    b.Property<int>("FeedBack_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedBack_Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FB_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedBack_Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Hotel_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Hotel_Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Avilable_double_Rooms")
                        .HasColumnType("int");

                    b.Property<int?>("Avilable_single_Rooms")
                        .HasColumnType("int");

                    b.Property<double?>("Day_Double_Cost")
                        .HasColumnType("float");

                    b.Property<double?>("Day_Single_Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has_Free_Wifi")
                        .HasColumnType("bit");

                    b.Property<bool>("Has_SeeView")
                        .HasColumnType("bit");

                    b.Property<bool>("Has_Sports_Gym")
                        .HasColumnType("bit");

                    b.Property<bool>("Has_SwimmingPool")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Photo1URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo2URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("photot3Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Hotel_Id");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Job", b =>
                {
                    b.Property<int>("Job_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Job_Id"));

                    b.Property<string>("Descripyion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeNum")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Statue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Work_Hourse")
                        .HasColumnType("int");

                    b.HasKey("Job_Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Report", b =>
                {
                    b.Property<int>("Report_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Report_Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Report_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Report_Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.SpecialTrip", b =>
                {
                    b.Property<int>("SpecialTrip_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialTrip_Id"));

                    b.Property<DateTime>("BackDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hotelId")
                        .HasColumnType("int");

                    b.HasKey("SpecialTrip_Id");

                    b.HasIndex("hotelId");

                    b.ToTable("SpecialTrips");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.TourGuid", b =>
                {
                    b.Property<int>("TourGuid_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourGuid_Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("tripId")
                        .HasColumnType("int");

                    b.HasKey("TourGuid_Id");

                    b.HasIndex("tripId");

                    b.ToTable("TourGuids");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Trip", b =>
                {
                    b.Property<int>("Trip_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Trip_Id"));

                    b.Property<DateTime>("BackDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Descripton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("hotelId")
                        .HasColumnType("int");

                    b.HasKey("Trip_Id");

                    b.HasIndex("hotelId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.TripFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("feedbackId")
                        .HasColumnType("int");

                    b.Property<int>("tripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("feedbackId");

                    b.HasIndex("tripId");

                    b.ToTable("TripFeedbacks");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.UserFeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("feedBackId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("feedBackId");

                    b.HasIndex("userId");

                    b.ToTable("UserFeedBacks");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.UserReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("reportId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("reportId");

                    b.HasIndex("userId");

                    b.ToTable("UserReports");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.UserTrip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("tripId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("tripId");

                    b.HasIndex("userId");

                    b.ToTable("UserTrips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookingHotel", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.Hotel", null)
                        .WithMany()
                        .HasForeignKey("Hotel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSpecialTrip", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.SpecialTrip", null)
                        .WithMany()
                        .HasForeignKey("SpecialTripsSpecialTrip_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingTrip", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.Trip", null)
                        .WithMany()
                        .HasForeignKey("Trip_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalAppG.Data.Models.AppUser", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Job", "job")
                        .WithMany("Users")
                        .HasForeignKey("jobId");

                    b.HasOne("FinalAppG.Data.Models.SpecialTrip", "specialTrip")
                        .WithMany("Users")
                        .HasForeignKey("specialtripId");

                    b.Navigation("job");

                    b.Navigation("specialTrip");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.CarDriverTrip", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Car", "car")
                        .WithMany("carDriverTrips")
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.Driver", "driver")
                        .WithMany("carDriverTrips")
                        .HasForeignKey("driverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.Trip", "trip")
                        .WithMany("carDriverTrips")
                        .HasForeignKey("tripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");

                    b.Navigation("driver");

                    b.Navigation("trip");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.SpecialTrip", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Hotel", "hotel")
                        .WithMany("SpecialTrips")
                        .HasForeignKey("hotelId");

                    b.Navigation("hotel");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.TourGuid", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Trip", "trip")
                        .WithMany()
                        .HasForeignKey("tripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trip");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Trip", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Hotel", "hotel")
                        .WithMany("trips")
                        .HasForeignKey("hotelId");

                    b.Navigation("hotel");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.TripFeedback", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.FeedBack", "feedback")
                        .WithMany("tripFeedbacks")
                        .HasForeignKey("feedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.Trip", "trip")
                        .WithMany("tripFeedbacks")
                        .HasForeignKey("tripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("feedback");

                    b.Navigation("trip");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.UserFeedBack", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.FeedBack", "FeedBack")
                        .WithMany("userFeedBacks")
                        .HasForeignKey("feedBackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.AppUser", "user")
                        .WithMany("userFeedBacks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedBack");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.UserReport", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Report", "report")
                        .WithMany("userReports")
                        .HasForeignKey("reportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.AppUser", "user")
                        .WithMany("userReports")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("report");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.UserTrip", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.Trip", "trip")
                        .WithMany("userTrips")
                        .HasForeignKey("tripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.AppUser", "user")
                        .WithMany("userTrips")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trip");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalAppG.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FinalAppG.Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinalAppG.Data.Models.AppUser", b =>
                {
                    b.Navigation("userFeedBacks");

                    b.Navigation("userReports");

                    b.Navigation("userTrips");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Car", b =>
                {
                    b.Navigation("carDriverTrips");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Driver", b =>
                {
                    b.Navigation("carDriverTrips");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.FeedBack", b =>
                {
                    b.Navigation("tripFeedbacks");

                    b.Navigation("userFeedBacks");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Hotel", b =>
                {
                    b.Navigation("SpecialTrips");

                    b.Navigation("trips");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Job", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Report", b =>
                {
                    b.Navigation("userReports");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.SpecialTrip", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FinalAppG.Data.Models.Trip", b =>
                {
                    b.Navigation("carDriverTrips");

                    b.Navigation("tripFeedbacks");

                    b.Navigation("userTrips");
                });
#pragma warning restore 612, 618
        }
    }
}
